# This is a good starting point for a Python project's .gitignore file.
# It is recommended to keep it up-to-date with your project's needs.
# For more information, refer to:
# - gitignore documentation: https://git-scm.com/docs/gitignore
# - GitHub's collection of gitignore templates: https://github.com/github/gitignore

# === Common Python build and environment files ===

# Byte-compiled / optimized / DLL files
__pycache__/
*.py[cod]
*$py.class

# C extensions
*.so

# Distribution / packaging
# The build/ directory is for distribution, but some projects prefer to ignore it.
build/
develop-eggs/
dist/
eggs/
.eggs/
# The following are often generated by different build systems
lib/
lib64/
parts/
sdist/
var/
wheels/
share/python-wheels/
*.egg-info/
.installed.cfg
*.egg
MANIFEST

# --- Installer logs ---
pip-log.txt
pip-delete-this-directory.txt

# --- Unit test / coverage reports ---
htmlcov/
.tox/
.nox/
.coverage
.coverage.*
.cache
nosetests.xml
coverage.xml
*.cover
*.py,cover
.hypothesis/
.pytest_cache/
cover/
**/.pytest_cache/

# --- Translations ---
*.mo
*.pot

# === Project-specific framework/tool files ===

# --- Django ---
*.log
local_settings.py
db.sqlite3
# Use a wildcard for the journal file to be safe
db.sqlite3-journal
# Also ignore all Django migrations
**/migrations/*.py
# except __init__.py files
!**/migrations/__init__.py

# --- Flask ---
instance/
.webassets-cache

# --- Scrapy ---
.scrapy

# --- Sphinx documentation ---
docs/_build/

# --- PyBuilder ---
.pybuilder/
target/

# --- Jupyter Notebook ---
.ipynb_checkpoints/

# --- IPython ---
profile_default/
ipython_config.py

# --- pyenv ---
# For a library or package, you might want to ignore this file since the code is
# intended to run in multiple environments; otherwise, check it in:
.python-version

# --- pipenv ---
# According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
# However, in case of collaboration, if having platform-specific dependencies or dependencies
# having no cross-platform support, pipenv may install dependencies that don't work, or not
# install all needed dependencies.
#Pipfile.lock

# --- poetry ---
# Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
# This is especially recommended for binary packages to ensure reproducibility, and is more
# commonly ignored for libraries.
# https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# --- pdm ---
# Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
# pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
# in version control.
# https://pdm.fming.dev/latest/usage/project/#working-with-version-control
.pdm.toml
.pdm-python
.pdm-build/

# --- PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm ---
__pypackages__/

# --- Celery stuff ---
celerybeat-schedule
celerybeat.pid

# --- SageMath parsed files ---
*.sage.py

# --- Environments ---
.env
.venv
env/
venv/
ENV/
env.bak/
venv.bak/

# === IDE files ===

# --- Spyder project settings ---
.spyderproject
.spyproject

# --- Rope project settings ---
.ropeproject

# --- mkdocs documentation ---
/site

# --- mypy ---
.mypy_cache/
.dmypy.json
dmypy.json

# --- Pyre type checker ---
.pyre/

# --- pytype static type analyzer ---
.pytype/

# --- Cython debug symbols ---
cython_debug/

# --- JetBrains (PyCharm, etc.) ---
.idea/

# --- VSCode settings ---
.vscode/

# === Operating system files ===
# MacOS system files
.DS_Store
# Windows system files
Thumbs.db

# === Other common files ===
# Logs
*.log
# Pytest cache - This is already listed under "Unit test / coverage reports,"
# but is often added independently. It's a duplicate, but a useful one to
# highlight.
.pytest_cache/
